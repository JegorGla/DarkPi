import socket
import cv2
import pickle
import struct

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
HOST = '0.0.0.0'  # –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
PORT = 12345       # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–æ—Ä—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–º, —á—Ç–æ —Ç—ã –ø—É–±–ª–∏–∫—É–µ—à—å —á–µ—Ä–µ–∑ ngrok/localtonet

def start_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((HOST, PORT))
    server_socket.listen(5)
    print(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}. –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞...")

    conn, addr = server_socket.accept()
    print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω: {addr}")

    data = b""
    payload_size = struct.calcsize("!I")

    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä
            while len(data) < payload_size:
                packet = conn.recv(4096)
                if not packet:
                    raise ConnectionError("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
                data += packet

            packed_msg_size = data[:payload_size]
            data = data[payload_size:]
            msg_size = struct.unpack("!I", packed_msg_size)[0]

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            while len(data) < msg_size:
                data += conn.recv(4096)

            frame_data = data[:msg_size]
            data = data[msg_size:]

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
            frame = pickle.loads(frame_data)
            frame = cv2.imdecode(frame, cv2.IMREAD_COLOR)

            cv2.imshow("üìπ –í–∏–¥–µ–æ–ø–æ—Ç–æ–∫ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞", frame)
            if cv2.waitKey(1) == 27:  # Esc ‚Äî –≤—ã—Ö–æ–¥
                break
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()
        server_socket.close()
        cv2.destroyAllWindows()
        print("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    start_server()
